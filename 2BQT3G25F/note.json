{
  "paragraphs": [
    {
      "title": "notebook2Py",
      "text": "import sys, json\n\n\ndef convert(input_path, output_path):\n    br \u003d \"\\r\\n\"\n    with open(input_path, \"r\") as reader, open(output_path, \"w\") as writer:\n        f \u003d json.load(reader)\n\n        for p in f[\"paragraphs\"]:\n            if p.get(\"title\"):\n                writer.write(\"# \" + p[\"title\"] + br)\n\n            if p.get(\"text\"):\n                text \u003d p.get(\"text\")\n                if text.startswith(\"%md\"):\n                    text \u003d text[4:]\n                    writer.write(\u0027\"\"\"\u0027 + br + text + br + \u0027\"\"\"\u0027 + br)\n                else:\n                    writer.write(text + br + br + br)\n\n        writer.flush()\n\n\nif __name__ \u003d\u003d \"__main__\":\n    if len(sys.argv) \u003d\u003d 3:\n        convert(*sys.argv[1:])\n    else:\n        sys.stderr.write(\"The first argument is input json path, the second argument is output path\\r\\n\")\n",
      "dateUpdated": "Jun 24, 2016 10:14:57 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466801959244_-1369054403",
      "id": "20160624-205919_1275774946",
      "dateCreated": "Jun 24, 2016 8:59:19 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Reload Data",
      "text": "from pyspark.sql.context import HiveContext\n\nsqlContext \u003d HiveContext(sc)\nsqlContext.read.parquet(\"file://home/vagrant/hdfs/user/hive/hive/warehouse/videos\").write.saveAsTable(\"videos\",mode\u003d\"overwrite\")",
      "dateUpdated": "Jul 1, 2016 3:37:58 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467325948127_1633469641",
      "id": "20160630-223228_1194359031",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jun 30, 2016 10:32:28 PM",
      "dateStarted": "Jun 30, 2016 10:37:07 PM",
      "dateFinished": "Jun 30, 2016 10:37:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "sqlContext.createDataFrame([dict(a\u003d1,b\u003d2)]).write.saveAsTable(\"temp\")\nsqlContext.sql(\"drop table temp\")",
      "dateUpdated": "Jul 1, 2016 2:47:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467339824149_-140946232",
      "id": "20160701-022344_1550143454",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "/usr/lib/spark/1.6.1/python/pyspark/sql/context.py:239: UserWarning: inferring schema from dict is deprecated,please use pyspark.sql.Row instead\n  warnings.warn(\"inferring schema from dict is deprecated,\"\n"
      },
      "dateCreated": "Jul 1, 2016 2:23:44 AM",
      "dateStarted": "Jul 1, 2016 2:47:27 AM",
      "dateFinished": "Jul 1, 2016 2:47:34 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nshow tables",
      "dateUpdated": "Jul 1, 2016 2:39:15 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "tableName",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "isTemporary",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "tableName",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "isTemporary",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466806401677_284154661",
      "id": "20160624-221321_1072704437",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "tableName\tisTemporary\nfeatures\tfalse\nuser_features\tfalse\nuser_scores\tfalse\nusermap\tfalse\nvideo_features\tfalse\nvideomap\tfalse\nvideos\tfalse\n"
      },
      "dateCreated": "Jun 24, 2016 10:13:21 PM",
      "dateStarted": "Jul 1, 2016 2:39:15 PM",
      "dateFinished": "Jul 1, 2016 2:39:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "tables \u003d sqlContext.tables().map(lambda r:r[0]).collect()\n\nfeatures \u003d dict()\nvideos \u003d dict()\nvideo_features \u003d dict()\nuser_scores \u003d dict()\nuser_features \u003d dict()\n\nfeatureIgnores \u003d [\"CBS Sports\", \"CBS\"]\nfeatureMaps \u003d {\"UNK NBA\":\"NBA\"}\n\nif \"videos\" in tables:\n    videos \u003d sqlContext.table(\"videos\").map(lambda row: (row.videoId, row.asDict())).collectAsMap()\n\nif \"features\" in tables:\n    features \u003d sqlContext.table(\"features\").map(lambda row: (row.name, row.asDict())).collectAsMap()\n\nif \"video_features\" in tables:\n    video_features \u003d sqlContext.table(\"video_features\").map(lambda row: ((row.videoId, row.feature), row.asDict())).collectAsMap()\n    \nif \"user_scores\" in tables:\n    user_scores \u003d sqlContext.table(\"user_scores\").map(lambda row: ((row[\"userId\"], row[\"videoId\"]), row.asDict())).collectAsMap()\n    \nif \"user_features\" in tables:\n    user_features \u003d sqlContext.table(\"user_features\").map(lambda row: ((row[\"userId\"], row[\"feature\"]), row.asDict())).collectAsMap()",
      "dateUpdated": "Jul 8, 2016 9:51:03 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467328054981_-1536288844",
      "id": "20160630-230734_627434194",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jun 30, 2016 11:07:34 PM",
      "dateStarted": "Jul 8, 2016 9:51:03 PM",
      "dateFinished": "Jul 8, 2016 9:51:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "features[\"UNK NBA\"][\"name\"] \u003d \"NBA\"\n\nfor vf in video_features.values():\n    if(vf[\"feature\"]\u003d\u003d\"UNK NBA\"):\n        vf[\"feature\"]\u003d\"NBA\"",
      "dateUpdated": "Jul 8, 2016 9:53:58 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1468009115953_472569070",
      "id": "20160708-201835_1455837802",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jul 8, 2016 8:18:35 PM",
      "dateStarted": "Jul 8, 2016 9:53:58 PM",
      "dateFinished": "Jul 8, 2016 9:53:58 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "sqlContext.createDataFrame(features).write.saveAsTable(\"features\", mode\u003d\"overwrite\")",
      "dateUpdated": "Jul 8, 2016 9:25:58 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1468005781843_1041396878",
      "id": "20160708-192301_923510681",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jul 8, 2016 7:23:01 PM",
      "dateStarted": "Jul 8, 2016 8:18:19 PM",
      "dateFinished": "Jul 8, 2016 8:18:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "sqlContext.createDataFrame(video_features.values()).write.saveAsTable(\"video_features\",mode\u003d\"overwrite\")",
      "dateUpdated": "Jul 8, 2016 9:56:24 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1468014981138_1696636969",
      "id": "20160708-215621_1236535758",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jul 8, 2016 9:56:21 PM",
      "dateStarted": "Jul 8, 2016 9:56:24 PM",
      "dateFinished": "Jul 8, 2016 9:56:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "#sqlContext.createDataFrame(videos.values()).write.saveAsTable(\"videos\",mode\u003d\"overwrite\")\n\nsqlContext.createDataFrame(video_features.values()).write.saveAsTable(\"video_features\",mode\u003d\"overwrite\")\n\nfrom pyspark.sql.types import *\nfeaturesSchema \u003d StructType().add(\"name\",StringType()) \\\n                             .add(\"description\",StringType()) \\\n                             .add(\"detailedDescription\",StringType()) \\\n                             .add(\"wikiId\", StringType()) \\\n                             .add(\"createdAt\",TimestampType()) \\\n                             .add(\"relatives\",MapType(StringType(), FloatType())) \\\n                             .add(\"types\" ,ArrayType(StringType())) \\\n                             .add(\"processed\",IntegerType()) \n\nsqlContext.createDataFrame(map(lambda r: (r.get(\"name\"), r.get(\"description\"), r.get(\"detailedDescription\"), r.get(\"wikiId\"), r.get(\"createdAt\"), r.get(\"relatives\"), r.get(\"types\"), r.get(\"processed\")), features.values()), featuresSchema).write.saveAsTable(\"features\",mode\u003d\"overwrite\")\n\n#sqlContext.createDataFrame(user_features.values()).write.saveAsTable(\"user_features\", mode\u003d\"overwrite\")",
      "dateUpdated": "Jul 8, 2016 9:56:22 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1468005837653_-1643872965",
      "id": "20160708-192357_1607859168",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jul 8, 2016 7:23:57 PM",
      "dateStarted": "Jul 8, 2016 9:54:55 PM",
      "dateFinished": "Jul 8, 2016 9:54:56 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "sqlContext.table(\"user\")",
      "dateUpdated": "Jul 8, 2016 9:58:51 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1468008796807_-289879012",
      "id": "20160708-201316_500899041",
      "dateCreated": "Jul 8, 2016 8:13:16 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Helper",
  "id": "2BQT3G25F",
  "angularObjects": {
    "2BNTUCZY9": [],
    "2BR35CAAY": [],
    "2BRV7JKUH": [],
    "2BPY7DFTV": [],
    "2BN8E2KUT": [],
    "2BMZT71S3": [],
    "2BPZNUUGB": [],
    "2BQF1EWMT": [],
    "2BPVUY6QV": [],
    "2BP8VQQUP": [],
    "2BRMK1MMP": [],
    "2BN67BXG6": [],
    "2BP4228GP": [],
    "2BPAMJPFK": []
  },
  "config": {},
  "info": {}
}